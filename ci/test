#!/bin/bash
set -eEu
set -o pipefail

################################################################################
# Run the test harness. Invoke as "ci/test".
################################################################################

. ci/bootstrap
. ci/functions.sh

ci/clean

info Check every file for things like trailing whitespace.
run_precommit

info Check that image exists.
run docker images | grep ssllabs-scan

info Copy binary into local directory.
run docker create --name scanbuild jumanjiman/ssllabs-scan true
run docker cp scanbuild:/ssllabs-scan .

info Check that binary is static.
file ssllabs-scan | grep -oh 'statically linked'

info 'Check that binary is stripped (no debug symbols).'
file ssllabs-scan | grep -oh 'stripped'
file ssllabs-scan | grep -vq 'not stripped'

if [ "${CIRCLECI:-false}" == true ]; then
    info Check that image has ci-build-url label.
    docker inspect \
        -f '{{ index .Config.Labels "io.github.jumanjiman.ci-build-url" }}' \
        jumanjiman/ssllabs-scan \
        | grep 'circleci.com'
fi

info Check that binary works.
run docker-compose run --rm grade_github

info 'Another syntax to do the same thing.'
run docker-compose run --rm scanner -grade -usecache https://github.com

info Start a sleeper container.
info The process in this "FROM scratch" container is expected to run as user "user".
cid=$(docker-compose run -d sleeper)

info Check that sleeper runs as unprivileged user.
info This proves that the technique to run a scratch container as a user still works.
info The sleeper container does not have the "ps" command, so we
info attach a regular container to the namespace of the sleeper container.
run docker run --rm -it --pid container:"${cid}" --network container:"${cid}" alpine:3.17.2 ps -o pid,user,group,comm \
    | grep -E -e run -e '1 1000     1000     sleeper'

info 'Check that /etc/hosts entries are used.'
info 'The sleeper container does not have the "ping" command, so we'
info 'attach a regular container to the namespace of the sleeper container.'
run docker run --rm -it --pid container:"${cid}" --network container:"${cid}" alpine:3.17.2 ping -c1 -W2 static-host.com

run docker-compose down
